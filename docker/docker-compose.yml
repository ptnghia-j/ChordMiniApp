# ChordMiniApp Docker Compose Configuration
# For local development and testing
#
# Usage:
#   1. Copy .env.docker.example to .env.docker and fill in your values
#   2. Run: docker-compose -f docker/docker-compose.yml --env-file .env.docker up

version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    image: chordminiapp:test
    container_name: chordmini-frontend
    ports:
      - "3000:3000"
    environment:
      # System Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED:-1}

      # Firebase Configuration (Public - exposed to browser via /api/config)
      - NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
      - NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
      - NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}
      - NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
      - NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID}
      - NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID}

      # API Configuration (Public)
      - NEXT_PUBLIC_YOUTUBE_API_KEY=${NEXT_PUBLIC_YOUTUBE_API_KEY}
      - NEXT_PUBLIC_PYTHON_API_URL=${NEXT_PUBLIC_PYTHON_API_URL:-http://backend:8080}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}

      # Feature Flags (Public)
      - NEXT_PUBLIC_AUDIO_STRATEGY=${NEXT_PUBLIC_AUDIO_STRATEGY:-auto}
      - NEXT_PUBLIC_ENABLE_TRUE_STREAMING=${NEXT_PUBLIC_ENABLE_TRUE_STREAMING:-false}
      - NEXT_DISABLE_DEV_OVERLAY=${NEXT_DISABLE_DEV_OVERLAY:-true}

      # Server-Only Secrets (Never exposed to browser)
      - MUSIC_AI_API_KEY=${MUSIC_AI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GENIUS_API_KEY=${GENIUS_API_KEY}
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}

      # Development Flags (Server-only)
      - USE_MOCK_MUSIC_AI=${USE_MOCK_MUSIC_AI:-false}
      - USE_FIREBASE_EMULATOR=${USE_FIREBASE_EMULATOR:-false}
    depends_on:
      - backend
    networks:
      - chordmini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend - Python Flask ML Service
  backend:
    image: chordminiapp-backend:spleeter
    container_name: chordmini-backend
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEFAULT_BEAT_MODEL=beat-transformer
      - DEFAULT_CHORD_MODEL=chord-cnn-lstm
      - MAX_CONTENT_LENGTH=104857600
      - UPLOAD_TIMEOUT=600
    volumes:
      # Optional: Mount models directory for development
      # - ../python_backend/models:/app/models:ro
      # Optional: Mount cache directory
      - backend-cache:/tmp/model_cache
    networks:
      - chordmini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Redis for caching (if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: chordmini-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - chordmini-network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes

networks:
  chordmini-network:
    driver: bridge
    name: chordmini-network

volumes:
  backend-cache:
    name: chordmini-backend-cache
  # redis-data:
  #   name: chordmini-redis-data
