name: ChordMini CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write
  checks: write
  packages: write
  id-token: write

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Pre-deployment validation job
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript compilation check
      run: npx tsc --noEmit
      
    - name: ESLint check
      run: npm run lint
      
    - name: Build verification
      run: npm run build
      
    - name: Run pre-deployment checklist
      run: |
        chmod +x scripts/pre-deployment-checklist.sh
        ./scripts/pre-deployment-checklist.sh
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        retention-days: 1

  # Build and push Docker images
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}
        labels: |
          org.opencontainers.image.title=ChordMiniApp Frontend
          org.opencontainers.image.description=Next.js frontend for ChordMiniApp
          org.opencontainers.image.vendor=ChordMiniApp

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}
        labels: |
          org.opencontainers.image.title=ChordMiniApp Backend
          org.opencontainers.image.description=Python Flask ML backend for ChordMiniApp
          org.opencontainers.image.vendor=ChordMiniApp

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./python_backend
        file: ./python_backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Security scan for Docker images
  scan-docker-images:
    name: Scan Docker Images
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-docker-images.outputs.frontend-image }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-docker-images.outputs.backend-image }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'

  # Optional: Deploy backend to Google Cloud Run
  # Note: This job is optional and requires GCP secrets to be configured
  # Set ENABLE_GCP_DEPLOYMENT repository variable to 'true' to enable
  deploy-backend-gcp:
    name: Deploy Backend to Google Cloud Run
    runs-on: ubuntu-latest
    needs: [build-docker-images, scan-docker-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.ENABLE_GCP_DEPLOYMENT == 'true'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Tag image for GCR
      run: |
        docker tag ${{ needs.build-docker-images.outputs.backend-image }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/chordmini-backend:latest
        docker tag ${{ needs.build-docker-images.outputs.backend-image }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/chordmini-backend:${{ github.sha }}

    - name: Push to Google Container Registry
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/chordmini-backend:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/chordmini-backend:${{ github.sha }}

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy chordmini-backend-full \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/chordmini-backend:${{ github.sha }} \
          --region us-central1 \
          --memory 16Gi \
          --cpu 8 \
          --timeout 600 \
          --max-instances 5 \
          --allow-unauthenticated \
          --platform managed \
          --set-env-vars="FLASK_ENV=production,DEFAULT_BEAT_MODEL=beat-transformer,DEFAULT_CHORD_MODEL=chord-cnn-lstm"

        # Get the service URL
        SERVICE_URL=$(gcloud run services describe chordmini-backend-full --region=us-central1 --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

  # Deploy to Vercel Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOYMENT_URL"
        
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Preview Deployment Ready!**
            
            **Preview URL:** ${{ steps.deploy.outputs.deployment_url }}
            
            **Changes in this PR:**
            - Build: ✅ Successful
            - TypeScript: ✅ No errors
            - ESLint: ✅ Clean
            
            The preview will be automatically updated with new commits.`
          })

  # Deploy to Production (for main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOYMENT_URL"
        
    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to be ready..."
        echo "Allowing extra time for serverless cold start..."
        sleep 60
        
    - name: Post-deployment verification
      run: |
        chmod +x scripts/post-deployment-verification.sh
        echo "Running post-deployment verification with cold start tolerance..."
        ./scripts/post-deployment-verification.sh ${{ steps.deploy.outputs.deployment_url }}
      continue-on-error: false
        
    - name: Notify deployment success
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: '${{ steps.deploy.outputs.deployment_url }}',
            description: 'Production deployment successful',
            context: 'vercel/deployment'
          })

  # Notification job for failures
  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify failure
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'failure',
            description: 'Deployment failed - check logs',
            context: 'vercel/deployment'
          })
          
          // Create an issue for deployment failure
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Production Deployment Failed - ${context.sha.substring(0, 7)}`,
            body: `**Deployment failed for commit:** ${context.sha}
            
            **Branch:** ${context.ref}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            
            **Action Required:**
            1. Check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Fix any issues identified
            3. Push a new commit to trigger redeployment
            
            **Quick Links:**
            - [View Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [Vercel Dashboard](https://vercel.com/dashboard)
            - [Firebase Console](https://console.firebase.google.com/project/chordmini-d29f9)`,
            labels: ['bug', 'deployment', 'urgent']
          })

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        if find . -name "*.env" -o -name "*.key" -o -name "*secret*" -o -name "*credential*" | grep -v node_modules | grep -v .env.example; then
          echo "❌ Sensitive files found in repository!"
          exit 1
        else
          echo "✅ No sensitive files found"
        fi
        
    - name: Verify environment variables
      run: |
        echo "Checking environment variable configuration..."
        if [ ! -f ".env.example" ]; then
          echo "❌ .env.example file missing"
          exit 1
        fi
        echo "✅ Environment configuration verified"
