/**
 * QuickTube Filename Generator - Exact yt-dlp Logic Replication
 *
 * This service replicates QuickTube's exact filename generation logic
 * based on yt-dlp's --restrict-filenames parameter.
 *
 * Key findings from analysis:
 * 1. Format: {sanitized_title}-[{video_id}].mp3
 * 2. Unicode decomposition: Characters with diacritics become base + underscore
 * 3. Example: "D≈®NG" ‚Üí "D_NG" (≈® decomposes to U + combining tilde, tilde becomes _)
 * 4. Spaces and special characters become underscores
 */

export interface FilenameGenerationResult {
  filename: string;
  downloadUrl: string;
  method: string;
}

export class QuickTubeFilenameGenerator {
  private static instance: QuickTubeFilenameGenerator;
  private readonly QUICKTUBE_BASE_URL = 'https://quicktube.app';

  public static getInstance(): QuickTubeFilenameGenerator {
    if (!QuickTubeFilenameGenerator.instance) {
      QuickTubeFilenameGenerator.instance = new QuickTubeFilenameGenerator();
    }
    return QuickTubeFilenameGenerator.instance;
  }

  /**
   * Generate the exact filename that QuickTube/yt-dlp would create
   */
  generateFilename(title: string, videoId: string): FilenameGenerationResult[] {
    // Use exact yt-dlp logic replication
    const exactFilename = this.replicateExactYtDlpLogic(title, videoId);

    const result: FilenameGenerationResult = {
      filename: exactFilename,
      downloadUrl: `${this.QUICKTUBE_BASE_URL}/dl/${encodeURIComponent(exactFilename)}`,
      method: 'yt-dlp-exact'
    };

    return [result];
  }

  /**
   * Replicate yt-dlp's exact filename generation logic
   * Final production version with minimal logging
   */
  private replicateExactYtDlpLogic(title: string, videoId: string): string {
    // Step 1: Apply Unicode decomposition
    let sanitized = this.applyUnicodeDecomposition(title);

    // Step 2: Replace spaces and special characters with underscores
    sanitized = this.replaceSpecialCharacters(sanitized);

    // Step 3: Clean up consecutive underscores
    sanitized = this.cleanupFilename(sanitized);

    // Step 4: Apply yt-dlp's standard format: {title}-[{id}].mp3
    const filename = `${sanitized}-[${videoId}].mp3`;

    console.log(`üîß Generated filename: "${filename}" for video ${videoId}`);
    return filename;
  }

  /**
   * Apply Unicode decomposition to match yt-dlp's exact behavior
   * CORRECTED VERSION: Based on analysis of "Ng·ªçt - L·∫¶N CU·ªêI (ƒëi b√™n em x√≥t xa ng∆∞·ªùi ∆°i)"
   * Expected: "Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-[kSjj0LlsqnI].mp3"
   */
  private applyUnicodeDecomposition(text: string): string {
    // CRITICAL FIX: Characters that disappear completely (not become 'd', 'u', etc.)
    const disappearingChars: Record<string, string> = {
      'ƒë': '',  // ƒëi ‚Üí i (ƒë disappears completely)
      'ƒê': '',  // ƒêO·∫†N ‚Üí O·∫†N (ƒê disappears completely)
      '∆∞': '',  // ng∆∞·ªùi ‚Üí ng·ªùi (∆∞ disappears completely)
      '∆Ø': '',  // uppercase version
      '∆°': '',  // ∆°i ‚Üí i (∆° disappears completely)
      '∆†': '',  // uppercase version
    };

    // Characters that become their base form (simple diacritics)
    const baseFormMappings: Record<string, string> = {
      // Basic vowels with simple diacritics ‚Üí base form
      '√Ä': 'A', '√Å': 'A', '√Ç': 'A', '√É': 'A',
      '√à': 'E', '√â': 'E', '√ä': 'E', '√ã': 'E',
      '√å': 'I', '√ç': 'I', '√é': 'I', '√è': 'I',
      '√í': 'O', '√ì': 'O', '√î': 'O', '√ï': 'O',
      '√ô': 'U', '√ö': 'U', '√õ': 'U', '√ú': 'U',
      '√ù': 'Y', '·ª≤': 'Y',

      // Lowercase versions
      '√†': 'a', '√°': 'a', '√¢': 'a', '√£': 'a',
      '√®': 'e', '√©': 'e', '√™': 'e', '√´': 'e',
      '√¨': 'i', '√≠': 'i', '√Æ': 'i', '√Ø': 'i',
      '√≤': 'o', '√≥': 'o', '√¥': 'o', '√µ': 'o',
      '√π': 'u', '√∫': 'u', '√ª': 'u', '√º': 'u',
      '√Ω': 'y', '·ª≥': 'y',
    };

    // Characters with complex diacritics that become underscores
    const underscoreMappings: Record<string, string> = {
      // Vietnamese tone marks and complex diacritics ‚Üí underscore
      '≈®': '_',     // D≈®NG ‚Üí D_NG (≈® becomes _)
      '·∫†': '_',     // ƒêO·∫†N ‚Üí O_N (·∫† becomes _)
      '·∫æ': '_',     // K·∫æT ‚Üí K_T (·∫æ becomes _)
      '·ªö': '_',     // M·ªöI ‚Üí M_I (·ªö becomes _)
      '·∫¶': '_',     // L·∫¶N ‚Üí L_N (·∫¶ becomes _)
      '·ªê': '_',     // CU·ªêI ‚Üí CU_I (·ªê becomes _)

      // All Vietnamese complex diacritics (uppercase)
      '·∫¢': '_', '·∫§': '_', '·∫®': '_', '·∫™': '_', '·∫¨': '_',
      '·∫Æ': '_', '·∫∞': '_', '·∫≤': '_', '·∫¥': '_', '·∫∂': '_',
      '·∫∏': '_', '·∫∫': '_', '·∫º': '_', '·ªÄ': '_', '·ªÇ': '_', '·ªÑ': '_', '·ªÜ': '_',
      '·ªä': '_', '·ªà': '_', 'ƒ®': '_',
      '·ªå': '_', '·ªé': '_', '·ªí': '_', '·ªî': '_', '·ªñ': '_', '·ªò': '_',
      '·ªú': '_', '·ªû': '_', '·ª†': '_', '·ª¢': '_',
      '·ª§': '_', '·ª¶': '_', '·ª®': '_', '·ª™': '_', '·ª¨': '_', '·ªÆ': '_', '·ª∞': '_',
      '·ª¥': '_', '·ª∂': '_', '·ª∏': '_',

      // Lowercase versions
      '≈©': '_', '·∫°': '_', '·∫£': '_', '·∫•': '_', '·∫ß': '_', '·∫©': '_', '·∫´': '_', '·∫≠': '_',
      '·∫Ø': '_', '·∫±': '_', '·∫≥': '_', '·∫µ': '_', '·∫∑': '_',
      '·∫π': '_', '·∫ª': '_', '·∫Ω': '_', '·∫ø': '_', '·ªÅ': '_', '·ªÉ': '_', '·ªÖ': '_', '·ªá': '_',
      '·ªã': '_', '·ªâ': '_', 'ƒ©': '_',
      '·ªç': '_', '·ªè': '_', '·ªë': '_', '·ªì': '_', '·ªï': '_', '·ªó': '_', '·ªô': '_',
      '·ªõ': '_', '·ªù': '_', '·ªü': '_', '·ª°': '_', '·ª£': '_',
      '·ª•': '_', '·ªß': '_', '·ª©': '_', '·ª´': '_', '·ª≠': '_', '·ªØ': '_', '·ª±': '_',
      '·ªµ': '_', '·ª∑': '_', '·ªπ': '_'
    };

    let result = text;

    // Step 1: Apply disappearing characters first (most important)
    for (const [unicode, replacement] of Object.entries(disappearingChars)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    // Step 2: Apply base form mappings
    for (const [unicode, replacement] of Object.entries(baseFormMappings)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    // Step 3: Apply underscore mappings
    for (const [unicode, replacement] of Object.entries(underscoreMappings)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    return result;
  }



  /**
   * Replace special characters with underscores
   * FINAL VERSION: Preserves hyphens and periods
   */
  private replaceSpecialCharacters(text: string): string {
    let result = text;

    // Replace spaces with underscores (preserves hyphens and periods naturally)
    result = result.replace(/\s/g, '_');

    // Replace pipe with underscore
    result = result.replace(/\|/g, '_');

    // Replace other special characters with underscores (but keep hyphens and periods!)
    result = result.replace(/[\,\!\?\(\)\[\]\{\}\+\=\&\%\$\#\@\^\*\~\`\;\'\"]/g, '_');

    return result;
  }

  /**
   * Clean up the filename by removing consecutive underscores
   * WORKING VERSION 5: Simple protection and restoration
   */
  private cleanupFilename(text: string): string {
    // Protect "_-_" sequences with a simple placeholder
    const HYPHEN_PLACEHOLDER = 'HYPHEN';
    let result = text.replace(/_-_/g, HYPHEN_PLACEHOLDER);

    // Remove consecutive underscores
    result = result.replace(/_+/g, '_');

    // Restore the "_-_" sequences
    result = result.replace(/HYPHEN/g, '_-_');

    // Remove leading and trailing underscores
    result = result.replace(/^_+|_+$/g, '');

    // Ensure it's not empty
    if (!result) {
      result = 'video';
    }

    return result;
  }

  /**
   * Test the filename generation with known examples
   * UPDATED: Added the problematic Vietnamese title case
   */
  testFilenameGeneration(): void {
    const testCases = [
      {
        title: "HO√ÄNG D≈®NG - ƒêO·∫†N K·∫æT M·ªöI | OFFICIAL AUDIO",
        videoId: "cX2uLlc0su4",
        expected: "HOANG_D_NG_-_O_N_K_T_M_I_OFFICIAL_AUDIO-[cX2uLlc0su4].mp3"
      },
      {
        title: "Ch·ªù Anh Nh√© (feat. Ho√†ng Rob)",
        videoId: "0chK12qHGfM",
        expected: "Ch_Anh_Nhe_feat._Hoang_Rob-[0chK12qHGfM].mp3"
      },
      {
        // CRITICAL TEST CASE: The problematic Vietnamese title
        title: "Ng·ªçt - L·∫¶N CU·ªêI (ƒëi b√™n em x√≥t xa ng∆∞·ªùi ∆°i)",
        videoId: "kSjj0LlsqnI",
        expected: "Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-[kSjj0LlsqnI].mp3"
      }
    ];

    console.log('üß™ Testing filename generation (CORRECTED VERSION):');
    testCases.forEach((testCase, index) => {
      const results = this.generateFilename(testCase.title, testCase.videoId);
      const primary = results[0];
      console.log(`üìù Test ${index + 1}: "${testCase.title}"`);
      console.log(`   Generated: "${primary.filename}"`);
      console.log(`   Expected:  "${testCase.expected}"`);

      const matches = primary.filename === testCase.expected;
      console.log(`   Result: ${matches ? '‚úÖ PASS' : '‚ùå FAIL'}`);

      if (!matches) {
        // Show character-by-character diff for debugging
        const generated = primary.filename.replace(`-[${testCase.videoId}].mp3`, '');
        const expected = testCase.expected.replace(`-[${testCase.videoId}].mp3`, '');
        console.log(`   Diff analysis:`);
        console.log(`     Generated base: "${generated}"`);
        console.log(`     Expected base:  "${expected}"`);

        const maxLen = Math.max(generated.length, expected.length);
        for (let i = 0; i < maxLen; i++) {
          const genChar = generated[i] || '(end)';
          const expChar = expected[i] || '(end)';
          if (genChar !== expChar) {
            console.log(`     Position ${i}: got "${genChar}", expected "${expChar}"`);
          }
        }
      }
      console.log('');
    });
  }
}

// Export singleton instance
export const quickTubeFilenameGenerator = QuickTubeFilenameGenerator.getInstance();
