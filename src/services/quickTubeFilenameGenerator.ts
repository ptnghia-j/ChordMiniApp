/**
 * QuickTube Filename Generator - Exact yt-dlp Logic Replication
 *
 * This service replicates QuickTube's exact filename generation logic
 * based on yt-dlp's --restrict-filenames parameter.
 *
 * Key findings from analysis:
 * 1. Format: {sanitized_title}-[{video_id}].mp3
 * 2. Unicode decomposition: Characters with diacritics become base + underscore
 * 3. Example: "D≈®NG" ‚Üí "D_NG" (≈® decomposes to U + combining tilde, tilde becomes _)
 * 4. Spaces and special characters become underscores
 */

export interface FilenameGenerationResult {
  filename: string;
  downloadUrl: string;
  method: string;
}

export class QuickTubeFilenameGenerator {
  private static instance: QuickTubeFilenameGenerator;
  private readonly QUICKTUBE_BASE_URL = 'https://quicktube.app';

  public static getInstance(): QuickTubeFilenameGenerator {
    if (!QuickTubeFilenameGenerator.instance) {
      QuickTubeFilenameGenerator.instance = new QuickTubeFilenameGenerator();
    }
    return QuickTubeFilenameGenerator.instance;
  }

  /**
   * Generate the exact filename that QuickTube/yt-dlp would create
   */
  generateFilename(title: string, videoId: string): FilenameGenerationResult[] {
    // Use exact yt-dlp logic replication
    const exactFilename = this.replicateExactYtDlpLogic(title, videoId);

    const result: FilenameGenerationResult = {
      filename: exactFilename,
      downloadUrl: `${this.QUICKTUBE_BASE_URL}/dl/${this.encodeQuickTubeFilename(exactFilename)}`,
      method: 'yt-dlp-exact'
    };

    return [result];
  }

  /**
   * Custom encoding for QuickTube URLs that preserves square brackets
   * QuickTube expects square brackets to remain unencoded in the URL
   *
   * CRITICAL FIX: This resolves the URL encoding mismatch where:
   * - Working URL: https://quicktube.app/dl/Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-[kSjj0LlsqnI].mp3
   * - Previous broken URL: https://quicktube.app/dl/Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-%5BkSjj0LlsqnI%5D.mp3
   *
   * KOREAN FIX: Strip any remaining non-ASCII characters instead of URL-encoding them
   * Example: "Í≤®Ïö∏ÏÇ¨Îûë_A_winter_story-[bvKB2JGFSi0].mp3" ‚Üí "A_winter_story-[bvKB2JGFSi0].mp3"
   */
  private encodeQuickTubeFilename(filename: string): string {
    // Step 1: Strip any remaining non-ASCII characters that weren't caught in decomposition
    // This handles cases where non-ASCII characters somehow remain in the filename
    let sanitized = filename.replace(/[^\x00-\x7F]/g, '');

    // Step 2: Clean up any leading/trailing underscores that might result from stripping
    sanitized = sanitized.replace(/^_+|_+$/g, '');

    // Step 3: Apply standard URL encoding to ASCII characters
    let encoded = encodeURIComponent(sanitized);

    // Step 4: Restore square brackets which QuickTube expects unencoded
    encoded = encoded.replace(/%5B/g, '[').replace(/%5D/g, ']');

    console.log(`üîß QuickTube URL encoding fix: "${filename}" ‚Üí "${encoded}"`);
    return encoded;
  }

  /**
   * Replicate yt-dlp's exact filename generation logic
   * Final production version with minimal logging
   */
  private replicateExactYtDlpLogic(title: string, videoId: string): string {
    // Step 1: Apply Unicode decomposition
    let sanitized = this.applyUnicodeDecomposition(title);

    // Step 2: Replace spaces and special characters with underscores
    sanitized = this.replaceSpecialCharacters(sanitized);

    // Step 3: Clean up consecutive underscores
    sanitized = this.cleanupFilename(sanitized);

    // Step 4: Apply yt-dlp's standard format: {title}-[{id}].mp3
    const filename = `${sanitized}-[${videoId}].mp3`;

    console.log(`üîß Generated filename: "${filename}" for video ${videoId}`);

    // Track performance for Vietnamese character handling
    this.trackFilenamePerformance(title, filename);

    return filename;
  }

  /**
   * Apply Unicode decomposition to match yt-dlp's exact behavior
   * CORRECTED VERSION: Based on analysis of "Ng·ªçt - L·∫¶N CU·ªêI (ƒëi b√™n em x√≥t xa ng∆∞·ªùi ∆°i)"
   * Expected: "Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-[kSjj0LlsqnI].mp3"
   *
   * VIETNAMESE DIACRITICS FIX: Handle Vietnamese character combinations properly
   * - "∆∞∆°" ‚Üí "_ng" (as a unit)
   * - "√¢n " ‚Üí "_" (√¢ becomes _, n + space merge)
   * - "u√¢n" ‚Üí "uan" (√¢ becomes a in this context)
   *
   * KOREAN FIX: Korean characters (Hangul) should be stripped entirely
   * Example: "Í≤®Ïö∏ÏÇ¨Îûë_A_winter_story" ‚Üí "A_winter_story"
   */
  private applyUnicodeDecomposition(text: string): string {
    // Step 0: Handle Vietnamese character combinations first
    let result = this.handleVietnameseCombinations(text);
    // Step 1: Strip non-Latin script characters entirely
    // This includes Korean, Chinese, Japanese, Arabic, Cyrillic, etc.

    // Korean Unicode ranges:
    // - Hangul Syllables: U+AC00-U+D7AF
    // - Hangul Jamo: U+1100-U+11FF
    // - Hangul Compatibility Jamo: U+3130-U+318F
    result = result.replace(/[\uAC00-\uD7AF\u1100-\u11FF\u3130-\u318F]/g, '');

    // Chinese Unicode ranges:
    // - CJK Unified Ideographs: U+4E00-U+9FFF
    // - CJK Extension A: U+3400-U+4DBF
    // - CJK Extension B: U+20000-U+2A6DF (handled by surrogate pairs)
    result = result.replace(/[\u4E00-\u9FFF\u3400-\u4DBF]/g, '');

    // Japanese Unicode ranges:
    // - Hiragana: U+3040-U+309F
    // - Katakana: U+30A0-U+30FF
    // - Katakana Phonetic Extensions: U+31F0-U+31FF
    result = result.replace(/[\u3040-\u309F\u30A0-\u30FF\u31F0-\u31FF]/g, '');

    // Arabic Unicode ranges:
    // - Arabic: U+0600-U+06FF
    // - Arabic Supplement: U+0750-U+077F
    // - Arabic Extended-A: U+08A0-U+08FF
    result = result.replace(/[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/g, '');

    // Cyrillic Unicode ranges:
    // - Cyrillic: U+0400-U+04FF
    // - Cyrillic Supplement: U+0500-U+052F
    result = result.replace(/[\u0400-\u04FF\u0500-\u052F]/g, '');

    // Hebrew Unicode range:
    // - Hebrew: U+0590-U+05FF
    result = result.replace(/[\u0590-\u05FF]/g, '');

    // Thai Unicode range:
    // - Thai: U+0E00-U+0E7F
    result = result.replace(/[\u0E00-\u0E7F]/g, '');

    // Step 2: Characters that should disappear completely (only ƒë/ƒê)
    const disappearingChars: Record<string, string> = {
      'ƒë': '',  // ƒëi ‚Üí i (ƒë disappears completely)
      'ƒê': '',  // ƒêO·∫†N ‚Üí O·∫†N (ƒê disappears completely)
    };

    // Characters that become their base form (simple diacritics)
    const baseFormMappings: Record<string, string> = {
      // Basic vowels with simple diacritics ‚Üí base form
      '√Ä': 'A', '√Å': 'A', '√É': 'A', '√Ñ': 'A', '√Ö': 'A', '√Ü': 'AE',
      '√à': 'E', '√â': 'E', '√ä': 'E', '√ã': 'E',
      '√å': 'I', '√ç': 'I', '√é': 'I', '√è': 'I',
      '√í': 'O', '√ì': 'O', '√î': 'O', '√ï': 'O', '√ñ': 'O', '√ò': 'O',
      '√ô': 'U', '√ö': 'U', '√õ': 'U', '√ú': 'U',
      '√ù': 'Y', '·ª≤': 'Y', '≈∏': 'Y',
      '√ë': 'N', '√á': 'C',

      // Lowercase versions
      '√†': 'a', '√°': 'a', '√£': 'a', '√§': 'a', '√•': 'a', '√¶': 'ae',
      '√®': 'e', '√©': 'e', '√™': 'e', '√´': 'e',
      '√¨': 'i', '√≠': 'i', '√Æ': 'i', '√Ø': 'i',
      '√≤': 'o', '√≥': 'o', '√¥': 'o', '√µ': 'o', '√∂': 'o', '√∏': 'o',
      '√π': 'u', '√∫': 'u', '√ª': 'u', '√º': 'u',
      '√Ω': 'y', '·ª≥': 'y', '√ø': 'y',
      '√±': 'n', '√ß': 'c',

      // Additional European characters
      '√ü': 'ss', // German eszett
      '√û': 'TH', '√æ': 'th', // Icelandic thorn
      '√ê': 'D', '√∞': 'd',   // Icelandic eth
    };

    // Characters with complex diacritics that become underscores
    const underscoreMappings: Record<string, string> = {
      // Vietnamese special characters that become underscores
      '∆∞': '_',     // Ph∆∞∆°ng ‚Üí Ph_ng (∆∞ becomes _)
      '∆Ø': '_',     // uppercase version
      '∆°': '_',     // h∆°n ‚Üí h_n (∆° becomes _)
      '∆†': '_',     // uppercase version
      '√¢': '_',     // s√¢n ‚Üí s_n (√¢ becomes _)
      '√Ç': '_',     // uppercase version

      // Vietnamese tone marks and complex diacritics ‚Üí underscore
      '≈®': '_',     // D≈®NG ‚Üí D_NG (≈® becomes _)
      '·∫†': '_',     // ƒêO·∫†N ‚Üí O_N (·∫† becomes _)
      '·∫æ': '_',     // K·∫æT ‚Üí K_T (·∫æ becomes _)
      '·ªö': '_',     // M·ªöI ‚Üí M_I (·ªö becomes _)
      '·∫¶': '_',     // L·∫¶N ‚Üí L_N (·∫¶ becomes _)
      '·ªê': '_',     // CU·ªêI ‚Üí CU_I (·ªê becomes _)

      // All Vietnamese complex diacritics (uppercase)
      '·∫¢': '_', '·∫§': '_', '·∫®': '_', '·∫™': '_', '·∫¨': '_',
      '·∫Æ': '_', '·∫∞': '_', '·∫≤': '_', '·∫¥': '_', '·∫∂': '_',
      '·∫∏': '_', '·∫∫': '_', '·∫º': '_', '·ªÄ': '_', '·ªÇ': '_', '·ªÑ': '_', '·ªÜ': '_',
      '·ªä': '_', '·ªà': '_', 'ƒ®': '_',
      '·ªå': '_', '·ªé': '_', '·ªí': '_', '·ªî': '_', '·ªñ': '_', '·ªò': '_',
      '·ªú': '_', '·ªû': '_', '·ª†': '_', '·ª¢': '_',
      '·ª§': '_', '·ª¶': '_', '·ª®': '_', '·ª™': '_', '·ª¨': '_', '·ªÆ': '_', '·ª∞': '_',
      '·ª¥': '_', '·ª∂': '_', '·ª∏': '_',

      // Lowercase versions
      '≈©': '_', '·∫°': '_', '·∫£': '_', '·∫•': '_', '·∫ß': '_', '·∫©': '_', '·∫´': '_', '·∫≠': '_',
      '·∫Ø': '_', '·∫±': '_', '·∫≥': '_', '·∫µ': '_', '·∫∑': '_',
      '·∫π': '_', '·∫ª': '_', '·∫Ω': '_', '·∫ø': '_', '·ªÅ': '_', '·ªÉ': '_', '·ªÖ': '_', '·ªá': '_',
      '·ªã': '_', '·ªâ': '_', 'ƒ©': '_',
      '·ªç': '_', '·ªè': '_', '·ªë': '_', '·ªì': '_', '·ªï': '_', '·ªó': '_', '·ªô': '_',
      '·ªõ': '_', '·ªù': '_', '·ªü': '_', '·ª°': '_', '·ª£': '_',
      '·ª•': '_', '·ªß': '_', '·ª©': '_', '·ª´': '_', '·ª≠': '_', '·ªØ': '_', '·ª±': '_',
      '·ªµ': '_', '·ª∑': '_', '·ªπ': '_'
    };

    // Step 3: Apply disappearing characters
    for (const [unicode, replacement] of Object.entries(disappearingChars)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    // Step 4: Apply base form mappings
    for (const [unicode, replacement] of Object.entries(baseFormMappings)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    // Step 5: Apply underscore mappings
    for (const [unicode, replacement] of Object.entries(underscoreMappings)) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    return result;
  }

  /**
   * Handle Vietnamese character combinations that need special processing
   * This handles cases where character context matters for conversion
   */
  private handleVietnameseCombinations(text: string): string {
    let result = text;

    // Handle specific Vietnamese combinations (order matters!)
    // "u√¢n" ‚Üí "uan" (√¢ becomes a when preceded by u, case insensitive) - FIRST
    result = result.replace(/([Uu])√¢n/g, '$1an');

    // "√¢n " (√¢ + n + space) ‚Üí "_" (merge into single underscore) - SECOND
    result = result.replace(/√¢n\s/g, '_');

    return result;
  }

  /**
   * Replace special characters with underscores
   * FINAL VERSION: Preserves hyphens and periods
   */
  private replaceSpecialCharacters(text: string): string {
    let result = text;

    // Replace spaces with underscores (preserves hyphens and periods naturally)
    result = result.replace(/\s/g, '_');

    // Replace pipe with underscore
    result = result.replace(/\|/g, '_');

    // Replace other special characters with underscores (but keep hyphens and periods!)
    result = result.replace(/[\,\!\?\(\)\[\]\{\}\+\=\&\%\$\#\@\^\*\~\`\;\'\"]/g, '_');

    return result;
  }

  /**
   * Clean up the filename by removing consecutive underscores
   * ENHANCED VERSION: Better handling of spaces and consecutive underscores
   */
  private cleanupFilename(text: string): string {
    // Protect "_-_" sequences with a simple placeholder
    const HYPHEN_PLACEHOLDER = 'HYPHEN_PLACEHOLDER';
    let result = text.replace(/_-_/g, HYPHEN_PLACEHOLDER);

    // Remove consecutive underscores (but preserve single underscores)
    result = result.replace(/_+/g, '_');

    // Restore the "_-_" sequences
    result = result.replace(/HYPHEN_PLACEHOLDER/g, '_-_');

    // Remove leading and trailing underscores
    result = result.replace(/^_+|_+$/g, '');

    // Handle edge case where stripping characters leaves only underscores and spaces
    // Convert remaining spaces to underscores and clean up again
    result = result.replace(/\s+/g, '_');
    result = result.replace(/_+/g, '_');
    result = result.replace(/^_+|_+$/g, '');

    // Ensure it's not empty
    if (!result) {
      result = 'video';
    }

    return result;
  }

  /**
   * Test the filename generation with known examples
   * UPDATED: Added Korean, Chinese, Japanese, Arabic, and other Unicode test cases
   */
  testFilenameGeneration(): void {
    const testCases = [
      // Vietnamese test cases
      {
        title: "HO√ÄNG D≈®NG - ƒêO·∫†N K·∫æT M·ªöI | OFFICIAL AUDIO",
        videoId: "cX2uLlc0su4",
        expected: "HOANG_D_NG_-_O_N_K_T_M_I_OFFICIAL_AUDIO-[cX2uLlc0su4].mp3"
      },
      {
        title: "Ch·ªù Anh Nh√© (feat. Ho√†ng Rob)",
        videoId: "0chK12qHGfM",
        expected: "Ch_Anh_Nhe_feat._Hoang_Rob-[0chK12qHGfM].mp3"
      },
      {
        title: "Ng·ªçt - L·∫¶N CU·ªêI (ƒëi b√™n em x√≥t xa ng∆∞·ªùi ∆°i)",
        videoId: "kSjj0LlsqnI",
        expected: "Ng_t_-_L_N_CU_I_i_ben_em_xot_xa_ng_i_i-[kSjj0LlsqnI].mp3"
      },

      // Korean test cases (should strip Korean characters entirely)
      {
        title: "Í≤®Ïö∏ÏÇ¨Îûë_A_winter_story",
        videoId: "bvKB2JGFSi0",
        expected: "A_winter_story-[bvKB2JGFSi0].mp3"
      },
      {
        title: "BTS Î∞©ÌÉÑÏÜåÎÖÑÎã® - Dynamite",
        videoId: "gdZLi9oWNZg",
        expected: "BTS_-_Dynamite-[gdZLi9oWNZg].mp3"
      },

      // Chinese test cases (should strip Chinese characters)
      {
        title: "Âë®Êù∞‰º¶ Jay Chou - ÈùíËä±Áì∑ Blue and White Porcelain",
        videoId: "test123",
        expected: "Jay_Chou_-_Blue_and_White_Porcelain-[test123].mp3"
      },

      // Japanese test cases (should strip Japanese characters)
      {
        title: "ÂÆáÂ§öÁî∞„Éí„Ç´„É´ Utada Hikaru - First Love",
        videoId: "test456",
        expected: "Utada_Hikaru_-_First_Love-[test456].mp3"
      },

      // Arabic test cases (should strip Arabic characters)
      {
        title: "ŸÅŸäÿ±Ÿàÿ≤ Fairuz - Lebanese Song",
        videoId: "test789",
        expected: "Fairuz_-_Lebanese_Song-[test789].mp3"
      },

      // Mixed Unicode with accents and special characters
      {
        title: "Caf√© M√ºller & Na√Øve R√©sum√©",
        videoId: "testABC",
        expected: "Cafe_Muller_Naive_Resume-[testABC].mp3"
      }
    ];

    console.log('üß™ Testing filename generation (CORRECTED VERSION):');
    testCases.forEach((testCase, index) => {
      const results = this.generateFilename(testCase.title, testCase.videoId);
      const primary = results[0];
      console.log(`üìù Test ${index + 1}: "${testCase.title}"`);
      console.log(`   Generated: "${primary.filename}"`);
      console.log(`   Expected:  "${testCase.expected}"`);

      const matches = primary.filename === testCase.expected;
      console.log(`   Result: ${matches ? '‚úÖ PASS' : '‚ùå FAIL'}`);

      if (!matches) {
        // Show character-by-character diff for debugging
        const generated = primary.filename.replace(`-[${testCase.videoId}].mp3`, '');
        const expected = testCase.expected.replace(`-[${testCase.videoId}].mp3`, '');
        console.log(`   Diff analysis:`);
        console.log(`     Generated base: "${generated}"`);
        console.log(`     Expected base:  "${expected}"`);

        const maxLen = Math.max(generated.length, expected.length);
        for (let i = 0; i < maxLen; i++) {
          const genChar = generated[i] || '(end)';
          const expChar = expected[i] || '(end)';
          if (genChar !== expChar) {
            console.log(`     Position ${i}: got "${genChar}", expected "${expChar}"`);
          }
        }
      }
      console.log('');
    });
  }

  /**
   * Track filename generation performance
   */
  private async trackFilenamePerformance(title: string, generatedFilename: string): Promise<void> {
    try {
      const { performanceMonitor } = await import('@/services/performanceMonitor');

      // Check if title contains Vietnamese characters
      const vietnamesePattern = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i;
      const isVietnamese = vietnamesePattern.test(title);

      // For now, assume success (we can add validation logic later)
      const success = generatedFilename.length > 0 && !generatedFilename.includes('undefined');

      performanceMonitor.trackFilenameMatching(success, isVietnamese);

      // Log Vietnamese character test for monitoring
      if (isVietnamese) {
        console.log(`üáªüá≥ Vietnamese character test: "${title}" ‚Üí "${generatedFilename}"`);
      }
    } catch {
      // Silently fail to avoid affecting filename generation
    }
  }
}

// Export singleton instance
export const quickTubeFilenameGenerator = QuickTubeFilenameGenerator.getInstance();
