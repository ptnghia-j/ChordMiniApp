rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for validation
    function isValidVideoId(videoId) {
      return videoId is string &&
             videoId.size() == 11 &&
             videoId.matches('^[a-zA-Z0-9_-]+$');
    }

    function isValidTimestamp(ts) {
      return ts is timestamp &&
             ts > timestamp.date(2020, 1, 1) &&
             ts < timestamp.date(2030, 1, 1);
    }

    function isValidAudioData(data) {
      return data.keys().hasAll(['videoId', 'audioUrl', 'createdAt']) &&
             isValidVideoId(data.videoId) &&
             data.audioUrl is string &&
             isValidTimestamp(data.createdAt) &&
             // Optional fields validation
             (data.videoUrl == null || data.videoUrl is string) &&
             (data.title == null || data.title is string) &&
             (data.thumbnail == null || data.thumbnail is string) &&
             (data.channelTitle == null || data.channelTitle is string) &&
             (data.storagePath == null || data.storagePath is string) &&
             (data.videoStoragePath == null || data.videoStoragePath is string) &&
             (data.fileSize == null || data.fileSize is number) &&
             (data.videoFileSize == null || data.videoFileSize is number) &&
             (data.duration == null || data.duration is number) &&
             (data.isStreamUrl == null || data.isStreamUrl is bool) &&
             (data.streamExpiresAt == null || data.streamExpiresAt is number) &&
             data.size() <= 50; // Limit number of fields
    }

    function isValidTranscriptionData(data) {
      // TEMPORARY: Simplified validation to isolate permission issues
      return data.keys().hasAll(['videoId', 'beatModel', 'chordModel', 'beats', 'chords', 'synchronizedChords', 'createdAt']) &&
             isValidVideoId(data.videoId) &&
             data.beatModel is string &&
             data.chordModel is string &&
             data.beats is list &&
             data.chords is list &&
             data.synchronizedChords is list &&
             isValidTimestamp(data.createdAt) &&
             data.size() <= 50; // Very generous limit
    }

    function isValidTranslationData(data) {
      return data.keys().hasAll(['videoId', 'targetLanguage', 'createdAt']) &&
             isValidVideoId(data.videoId) &&
             data.targetLanguage is string &&
             data.targetLanguage.size() <= 10 &&
             isValidTimestamp(data.createdAt) &&
             data.size() <= 20; // Limit number of fields
    }

    // Rate limiting helper (basic implementation)
    function isWithinRateLimit() {
      // Allow up to 100 operations per hour per IP
      // This is a simplified check - in production you might want more sophisticated rate limiting
      return true;
    }

    // Audio files collection - for storing extracted audio metadata
    match /audioFiles/{videoId} {
      // Allow read access to everyone for caching functionality (including anonymous users)
      allow read: if true;

      // Allow write access with validation and rate limiting (including anonymous users)
      allow create: if isValidVideoId(videoId) &&
                       isValidAudioData(resource.data) &&
                       isWithinRateLimit();

      // Allow updates only if the structure is valid (including anonymous users)
      allow update: if isValidVideoId(videoId) &&
                       isValidAudioData(resource.data) &&
                       isWithinRateLimit();

      // Prevent deletion by regular users (only allow expiration)
      allow delete: if false;
    }

    // Legacy audio cache collection - for backward compatibility
    match /audioCache/{videoId} {
      // Allow read access to everyone for caching functionality (including anonymous users)
      allow read: if true;

      // Allow write access with validation and rate limiting (including anonymous users)
      allow create: if isValidVideoId(videoId) &&
                       isValidAudioData(resource.data) &&
                       isWithinRateLimit();

      // Allow updates only if the structure is valid (including anonymous users)
      allow update: if isValidVideoId(videoId) &&
                       isValidAudioData(resource.data) &&
                       isWithinRateLimit();

      // Prevent deletion by regular users (only allow expiration)
      allow delete: if false;
    }

    // Transcription cache collection - for storing lyrics and analysis results
    match /transcriptionCache/{documentId} {
      // Allow read access to everyone for caching functionality
      allow read: if true;

      // Allow write access with validation
      allow create: if isValidTranscriptionData(resource.data) &&
                       isWithinRateLimit();

      // Allow updates with validation
      allow update: if isValidTranscriptionData(resource.data) &&
                       isWithinRateLimit();

      // Prevent deletion by regular users
      allow delete: if false;
    }

    // Transcriptions collection - for storing beat and chord analysis results
    match /transcriptions/{documentId} {
      // Allow read access to everyone for caching functionality
      allow read: if true;

      // TEMPORARY: Allow all writes to isolate validation issues
      allow create: if true;

      // TEMPORARY: Allow all updates to isolate validation issues
      allow update: if true;

      // Allow deletion by admin users only
      allow delete: if request.auth != null &&
                       request.auth.token.email in [
                         'ptnghia@csu.fullerton.edu',
                         'phantrongnghia510@gmail.com'
                       ];
    }

    // Translation cache collection - for storing translated lyrics
    match /translationCache/{documentId} {
      // Allow read access to everyone
      allow read: if true;

      // Allow write access with validation
      allow create: if isValidTranslationData(resource.data) &&
                       isWithinRateLimit();

      // Allow updates with validation
      allow update: if isValidTranslationData(resource.data) &&
                       isWithinRateLimit();

      // Allow deletion by admin users only
      allow delete: if request.auth != null &&
                       request.auth.token.email in [
                         'ptnghia@csu.fullerton.edu',
                         'phantrongnghia510@gmail.com'
                       ];
    }

    // Translations collection - for storing translated lyrics
    match /translations/{documentId} {
      // Allow read access to everyone
      allow read: if true;

      // Allow write access with validation
      allow create: if isValidTranslationData(resource.data) &&
                       isWithinRateLimit();

      // Allow updates with validation
      allow update: if isValidTranslationData(resource.data) &&
                       isWithinRateLimit();

      // Allow deletion by admin users only
      allow delete: if request.auth != null &&
                       request.auth.token.email in [
                         'ptnghia@csu.fullerton.edu',
                         'phantrongnghia510@gmail.com'
                       ];
    }

    // Lyrics collection - for storing transcribed lyrics
    match /lyrics/{documentId} {
      // Allow read access to everyone
      allow read: if true;

      // TEMPORARY: Allow all writes to isolate validation issues (same as transcriptions)
      // This is safe because lyrics are just ML model outputs (Music.AI transcriptions)
      allow create: if true;

      // TEMPORARY: Allow all updates to isolate validation issues
      allow update: if true;

      // Allow deletion by admin users only
      allow delete: if request.auth != null &&
                       request.auth.token.email in [
                         'ptnghia@csu.fullerton.edu',
                         'phantrongnghia510@gmail.com'
                       ];
    }

    // Admin collection - restricted to trusted maintainers
    match /admin/{document=**} {
      // Only allow access to specific admin users
      // Replace these email addresses with actual maintainer emails
      allow read, write: if request.auth != null &&
                            request.auth.token.email in [
                              'ptnghia@csu.fullerton.edu',
                              'phantrongnghia510@gmail.com',
                              'admin@chordmini.com'
                              // Add more maintainer emails here
                            ];
    }

    // System metrics and monitoring - read-only for everyone, write for admins
    match /metrics/{document=**} {
      allow read: if true;
      allow write: if request.auth != null &&
                      request.auth.token.email in [
                        'ptnghia@csu.fullerton.edu',
                        'phantrongnghia510@gmail.com',
                        'admin@chordmini.com'
                      ];
    }

    // User feedback and error reports - allow anonymous submissions
    match /feedback/{documentId} {
      allow read: if false; // Feedback is private
      allow create: if resource.data.keys().hasAll(['message', 'createdAt']) &&
                       resource.data.message is string &&
                       resource.data.message.size() <= 1000 &&
                       isValidTimestamp(resource.data.createdAt) &&
                       isWithinRateLimit();
      allow update, delete: if false;
    }

    // Error logs - for debugging and monitoring
    match /errorLogs/{documentId} {
      allow read: if false; // Error logs are private
      allow create: if resource.data.keys().hasAll(['error', 'createdAt']) &&
                       resource.data.error is string &&
                       resource.data.error.size() <= 2000 &&
                       isValidTimestamp(resource.data.createdAt) &&
                       isWithinRateLimit();
      allow update, delete: if false;
    }

    // Key detection cache collection - for storing musical key analysis results
    match /keyDetections/{documentId} {
      // Allow read access to everyone for caching functionality
      allow read: if true;

      // TEMPORARY: Simplified validation to isolate permission issues
      allow create: if resource.data.keys().hasAll(['primaryKey']) &&
                       resource.data.primaryKey is string &&
                       resource.data.size() <= 100; // Very generous limit

      // TEMPORARY: Simplified validation for updates
      allow update: if resource.data.keys().hasAll(['primaryKey']) &&
                       resource.data.primaryKey is string &&
                       resource.data.size() <= 100; // Very generous limit

      // Allow deletion by admin users only
      allow delete: if request.auth != null &&
                       request.auth.token.email in [
                         'ptnghia@csu.fullerton.edu',
                         'phantrongnghia510@gmail.com'
                       ];
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
